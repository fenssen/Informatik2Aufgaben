/** * Die Klasse BSTNode implementiert die Knoten eines * binaren Suchbaums. * @version 1.0 * @author Klaus Hinrichs */public class BSTNode<E extends Comparable<E>> {    // private Attribute    // Referenz auf Datenelement    private E element = null;        // Referenz auf den linken Nachfolger    private BSTNode<E> left = null;        // Referenz auf den rechten Nachfolger    private BSTNode<E> right = null;      //Balance    private int balance = 0;        // Konstruktoren    /**     * Der Konstruktor erzeugt einen neuen Baumknoten.     * Das Element und die Nachfolgerknoten werden mit null     * initialisiert.     */    public BSTNode() { }        /**     * Der Konstruktor erzeugt einen neuen Baumknoten und     * fuegt Element in den Knoten ein.     * Die Nachfolgerknoten werden mit null initialisiert.     * @param Comparable (Referenz auf) Datenelement     */    public BSTNode(E element) {        this.element = element;    }    /**     * Der Konstruktor erzeugt einen neuen Baumknoten und     * fuegt (Referenz auf) Datenobjekt sowie Referenzen auf     * Nachfolgerknoten in den Knoten ein.     * @param Comparable (Referenz auf) Datenelement     * @param BSTNode (Referenzen auf) Nachfolgerknoten     * @param father Referenz auf Vaterknoten     */    public BSTNode(E element, BSTNode<E> left, BSTNode<E> right) {        this.element = element;        this.left = left;        this.right = right;    }    // public Methoden    /**     * setzt Balancewert     * @param value Wert der Gewichtung     */    public void setBalance(int balance)    {        this.balance = balance;    }        /**     * gibt Balancewert des Knotens wieder     * @return Balancewert     */    public int getBalance()    {        return this.balance;    }        /**     * Setzt Referenz auf den linken Nachfolgerknoten.     * @param BSTNode (Referenz auf) Baumknoten      */    public void setLeftNode(BSTNode<E> left) {        this.left = left;    }    /**     * Gibt Referenz auf den linken Nachfolgerknoten zurueck.     */    public BSTNode<E> getLeftNode() {        return left;    }    /**     * Setzt Referenz auf den rechten Nachfolgerknoten.     * @param BSTNode (Referenz auf) Baumknoten      */    public void setRightNode(BSTNode<E> right) {        this.right = right;    }    /**     * Gibt Referenz auf den rechten Nachfolgerknoten zurueck.     */    public BSTNode<E> getRightNode() {        return right;    }       /**      * Fuegt (Referenz auf) Element in Knoten ein.      * @param Comparable (Referenz auf) einzufuegendes Datenelement       */    public void setData(E element) {        this.element = element;    }    /**      * Gibt (Referenz auf) im Knoten gespeichertes Element zurueck.      */    public E getData() {        return element;    }} // class BSTNode